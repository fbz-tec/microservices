services:
  read:
    image: grafana/loki:3.4
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - "3101:3100"
      - "7946"
      - "9095"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      eazybank:
        aliases:
          - loki

  write:
    image: grafana/loki:3.4
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - "3102:3100"
      - "7946"
      - "9095"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:v1.7.1
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - "12345:12345"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:3.4
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000"
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:v3.2.1
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo:2.6.1
    container_name: tempo
    ports:
      - "3110:3100"
      - "4318:4318"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yaml
    command:
      - "-config.file=/etc/tempo-config.yaml"
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/ds.yml
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1
        
        events {
          worker_connections   1000;
        }
        
        http {
          resolver 127.0.0.11;
        
          server {
            listen             3100;
        
            location = / {
              return 200 'OK';
              auth_basic off;
            }
        
            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
        
            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  postgresql:
    image: bitnami/postgresql:15.4.0
    container_name: postgresql-ms
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: rocks
    volumes:
      - ../db_scripts/schemas:/opt/schemas
      - ../db_scripts/db-init.sh:/docker-entrypoint-initdb.d/db-init.sh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    extends:
      file: common-config.yml
      service: network-deploy-service

  configserver:
    image: "fbz-tec/configserver:s11"
    container_name: configserver-ms
    ports:
      - "8071:8071"
    healthcheck:
      test: "wget -qO- --tries=1 --timeout=5 http://localhost:8071/actuator/health/readiness | grep -q 'UP' || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      OTEL_SERVICE_NAME: configserver

  eurekaserver:
    image: "fbz-tec/eurekaserver:s11"
    container_name: eurekaserver-ms
    ports:
      - "8070:8070"
    environment:
      SPRING_APPLICATION_NAME: eurekaserver
      OTEL_SERVICE_NAME: configserver
    healthcheck:
      test: "wget -qO- --tries=1 --timeout=5 http://localhost:8070/actuator/health/readiness | grep -q 'UP' || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      configserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-configservice-config

  gatewayserver:
    image: "fbz-tec/gatewayserver:s11"
    container_name: gatewayserver-ms
    ports:
      - "8072:8072"
    environment:
      SPRING_APPLICATION_NAME: gatewayserver
      SPRING_DATA_REDIS_HOST: "redis"
      OTEL_SERVICE_NAME: gatewayserver
    healthcheck:
      test: "wget -qO- --tries=1 --timeout=5 http://localhost:8072/actuator/health/readiness | grep -q 'UP' || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      accounts:
        condition: service_healthy
      cards:
        condition: service_healthy
      loans:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  accounts:
    image: "fbz-tec/accounts:s11"
    container_name: accounts-ms
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_NAME: accounts
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgresql:5432/accountsdb"
      OTEL_SERVICE_NAME: accounts
    healthcheck:
      test: "wget -qO- --tries=1 --timeout=5 http://localhost:8080/actuator/health/readiness | grep -q 'UP' || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      eurekaserver:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  loans:
    image: "fbz-tec/loans:s11"
    container_name: loans-ms
    ports:
      - "8090:8090"
    environment:
      SPRING_APPLICATION_NAME: loans
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgresql:5432/loansdb"
      OTEL_SERVICE_NAME: loans
    healthcheck:
      test: "wget -qO- --tries=1 --timeout=5 http://localhost:8090/actuator/health/readiness | grep -q 'UP' || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      eurekaserver:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  cards:
    image: "fbz-tec/cards:s11"
    container_name: cards-ms
    ports:
      - "8078:8078"
    environment:
      SPRING_APPLICATION_NAME: cards
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgresql:5432/cardsdb"
      OTEL_SERVICE_NAME: cards
    healthcheck:
      test: "wget -qO- --tries=1 --timeout=5 http://localhost:8078/actuator/health/readiness | grep -q 'UP' || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      eurekaserver:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config

networks:
  eazybank:
    driver: "bridge"